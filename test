#!/usr/bin/env bash

## Cross-Platform Embedded Toolchain
## Copyright (c) 2016 Phil Crump <phil@philcrump.co.uk>
## Freely distributable under the MIT license.

source_dir="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
cd $source_dir

opt_flash=false
opt_quiet=false
opt_sound=false
opt_asm=false
opt_werror=false
opt_verbose=false
opt_osize=false
opt_testverbose=false

COLOUR_GREEN='\033[0;32m'
COLOUR_YELLOW='\033[1;33m'
COLOUR_PURPLE='\033[0;35m'
COLOUR_RED='\033[0;31m'
COLOUR_OFF='\033[0;00m'
CLEAR_LINE='\033[2K'

_ERROR_="$COLOUR_RED[ERROR]$COLOUR_OFF"
_INFO_="$COLOUR_PURPLE[INFO]$COLOUR_OFF"
_DEBUG_="$COLOUR_YELLOW[DEBUG]$COLOUR_OFF"

stdin="/proc/$$/fd/0"
stdout="/proc/$$/fd/1"
stderr="/proc/$$/fd/2"
stdnull="/dev/null"

usage() {
    echo "Usage: test <module>" >&2
}

print() {
    if ! $opt_quiet
    then
        echo -e $@ >&$stdout
    fi
}
print_err() {
    if ! $opt_quiet
    then
        echo -e $@ >&$stderr
    fi
}

hyphenjoin() {
  str=""
  while [ $# -gt 0 ]
  do
    str="$str$1-"
    shift
  done
  if [ ! -z "$str" ]
  then
    str="${str::-1}"
  fi
  echo "$str"
}

print_help() {
  echo ""
  echo " Usage: ./test <module>"
  echo ""
  echo " Options:"
  echo ""
  echo " -h        Display this help and exit."
  echo " -q        Hide all messages apart from errors."
  echo " -v        Compile verbosely."
  echo " -V        Test verbosely."
  echo " -m        Also generate machine code output."
  echo " -w        Tell compiler to treat warnings as errors."
  echo " -s        Tell compiler to optimise for code size."
  echo ""
}

## Read Flags
OPTIND=1
while getopts ":hmdsqvVw" opt; do
  case "$opt" in
    h) # Help
      print_help
      exit 0
      ;;
    m) # ASM
      opt_asm=true
      ;;
    s) # Optimise for Size
      opt_osize=true
      ;;
    q) # Quiet
      opt_quiet=true
      ;;
    v) # Verbose
      opt_verbose=true
      ;;
    V) # Verbose Tests
      opt_testverbose=true
      ;;
    w) # Warnings as Errors
      opt_werror=true
      ;;
    ?) # Illegal Option
      print_err "$_ERROR_ Illegal option '$OPTARG'"
      print_help
      exit 3
      ;;
  esac
done
for i in `seq 2 $OPTIND`; do shift; done

## Read Arguments
module=${1,,}
shift


## Check <program> argument
if [ ! -e "src/${module}/test/${module}.c" ]; then
    print_err "$_ERROR_ Test file for module \"${module}\" not found"
    exit 1
fi



## Set up Makefile Flags

githash="$(git describe --dirty --always)"
# Mark as dirty if untracked files exist
if [ -z "$(echo "$githash" | grep "dirty")" ] && [ ! -z "$(git status --porcelain | grep "^??")" ]; then
	githash="$githash-dirty"
fi

outdir="builds"
filename="test-$(hyphenjoin $module $flags $githash)"

flags="BOARD=gnulinux MAIN=../${module}/test/${module} OUTDIR=${outdir} OUTFILE=\"${filename}\""

if $opt_osize; then
  print "$_INFO_ Compiler optimise for size (-Os):$COLOUR_RED ON $COLOUR_OFF"
  flags="${flags} OSIZE_ON=true"
fi
if $opt_werror; then
  print "$_INFO_ Compiler set Warnings as Errors:$COLOUR_RED ON $COLOUR_OFF"
  flags="${flags} WERROR_ON=true"
fi
if $opt_verbose; then
  print "$_INFO_ Compiler Verbose:$COLOUR_RED ON $COLOUR_OFF"
  flags="${flags} VERBOSE_ON=true"
fi
if $opt_testverbose; then
  print "$_INFO_ Tests Verbose:$COLOUR_RED ON $COLOUR_OFF"
  flags="${flags} TESTVERBOSE_ON=true"
fi

## Change to board directory, make clean, make, then print summary message.
cd "src/board/gnulinux"
make ${flags} clean \
&& make ${flags} \
&& {
	print "$_INFO_$COLOUR_GREEN Built: ${outdir}/${filename}$COLOUR_OFF" \
  && print "$_INFO_$COLOUR_GREEN Running test..$COLOUR_OFF" \
	&& ../../../${outdir}/${filename} \
	&& exit 0
} || {
	print "$_ERROR_$COLOUR_RED There were errors in the build process$COLOUR_OFF" \
	&& exit 1
}
