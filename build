#!/usr/bin/env bash

source_dir="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
cd $source_dir

compiler=arm-none-eabi-gcc

opt_flash=false
opt_quiet=false
opt_sound=false

COLOUR_GREEN='\033[0;32m'
COLOUR_YELLOW='\033[1;33m'
COLOUR_PURPLE='\033[0;35m'
COLOUR_RED='\033[0;31m'
COLOUR_OFF='\033[0;00m'
CLEAR_LINE='\033[2K'

_ERROR_="$COLOUR_RED[ERROR]$COLOUR_OFF"
_INFO_="$COLOUR_PURPLE[INFO]$COLOUR_OFF"
_DEBUG_="$COLOUR_YELLOW[DEBUG]$COLOUR_OFF"

stdin="/proc/$$/fd/0"
stdout="/proc/$$/fd/1"
stderr="/proc/$$/fd/2"
stdnull="/dev/null"

usage() {
    echo "Usage: build <board> <program>" >&2
}

print() {
    if ! $opt_quiet
    then
        echo -e $@ >&$stdout
    fi
}
print_err() {
    if ! $opt_quiet
    then
        echo -e $@ >&$stderr
    fi
}

hyphenjoin() {
  str=""
  while [ $# -gt 0 ]
  do
    str="$str$1-"
    shift
  done
  if [ ! -z "$str" ]
  then
    str="${str::-1}"
  fi
  echo "$str"
}

flash() {
  if $opt_flash; then
    flash_args="";
    if $opt_sound; then flash_args="-s"; fi
    ${source_dir}/flash ${flash_args} ${outdir}/${filename};
  fi
}

## Read Flags
OPTIND=1
while getopts ":qFs" opt; do
  case "$opt" in
    q) # Quiet
      opt_quiet=true
      ;;
    F) # Flash
      opt_flash=true
      ;;
    s) # Sound
      opt_sound=true
      ;;
    ?) # Illegal Option
      print_err "$_ERROR_ Illegal option '$OPTARG'"
      exit 3
      ;;
  esac
done
for i in `seq 2 $OPTIND`; do shift; done

## Read Arguments
board=${1,,}
shift
program=${1,,}
shift

## Check Compiler is installed
hash ${compiler} 2>/dev/null \
|| {
    print_err "$_ERROR_ GCC ARM Compiler not installed. Aborting.";
    exit 1;
}

## Check <board> argument
if [ -z "$board" ]; then
    print_err "$_ERROR_ A board must be specified"
    usage
    exit 1
fi
if [ ! -d "src/board/${board}" ]; then
    print_err "$_ERROR_ Board \"${board}\" not found"
    exit 1
fi

## Run <board>'s dependencies script if it exists
if [ -f "src/board/${board}/dependencies.sh" ]; then
    src/board/${board}/dependencies.sh;
    if [[ $? != 0 ]]; then
      exit 1
    fi
fi

## Check <program> argument
if [ -z "$program" ]; then
    print_err "$_ERROR_ A main program file must be specified"
    usage
    exit 1
fi
if [ ! -e "src/main/$program.c" ]; then
    print_err "$_ERROR_ Main Program File \"$program\" not found"
    exit 1
fi

## Set up Makefile Defines
defines="-D BOARD=${board^^} -D MAIN=${program}"
githash="$(git describe --dirty --always)"
# Mark as dirty if untracked files exist
if [ -z "$(echo "$githash" | grep "dirty")" ] && [ ! -z "$(git status --porcelain | grep "^??")" ]; then
	githash="$githash-dirty"
fi
outdir="builds"
filename="$(hyphenjoin $board $program $flags $githash)"

## Print compiler information
print "$_INFO_ Building with $(${compiler} --version | head -n1)"

## Change to board directory, make clean, make, then print summary message.
cd "src/board/$board"
make OUTDIR="$outdir" OUTFILE="$filename" MAIN="$program" BOARD="$board" clean \
&& make DEFINES="$defines" OUTDIR="$outdir" OUTFILE="$filename" MAIN="$program" BOARD="$board" \
&& {
	print "$_INFO_$COLOUR_GREEN Built: ${outdir}/${filename}$COLOUR_OFF" \
	&& flash \
	&& exit 0
} || {
	print "$_ERROR_$COLOUR_RED There were errors in the build process$COLOUR_OFF" \
	&& exit 1
}
